name: PCB

on:
  workflow_dispatch:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # Match semantic versioning tags
    branches:
      - main
      - dev
    paths-ignore:
      - '*.md'

env:
  kicad_board: Template
  kibot_config: kibot_yaml/kibot_main.yaml

  # Output directory for the run results from KiBot
  kibot_output_dir: ../production

  # Used variant. We assume:
  # DRAFT: only schematic in progress, will only generate schematic PDF, netlist and BoM
  # PRELIMINARY: will generate both schematic and PCB documents, but no ERC/DRC
  # CHECKED: will generate both schematic and PCB documents, with ERC/DRC
  # RELEASED: similar to CHECKED, automatically selected when pushing a tag to main
  kibot_variant: DRAFT

  MOUSER_KEY: ${{ secrets.MOUSER_KEY }}

permissions:
  contents: write

jobs:
  release:
    needs: generate_outputs
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto_full:latest

    if: github.ref_type == 'tag'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Pull latest changes
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git config pull.rebase true
          git fetch
          git pull origin main

      - name: Release
        uses: docker://antonyurchenko/git-release:v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: |
            Schematic/*.pdf
            Purchasing/*
            Manufacturing/Assembly/*
            Manufacturing/Fabrication/*.pdf
            Manufacturing/Fabrication/*.zip
            Manufacturing/Fabrication/*.txt
            3D/*.step
            Testing/Testpoints/*.csv

  generate_outputs:
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto_full:latest

    if: "!contains(github.event.head_commit.message, 'Merge pull request') || github.ref_type == 'tag'"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize
        run: |
          mkdir -p log
          echo "DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # Run these changelog update steps only on tag pushes
      - name: Pull latest changes for changelog update
        if: ${{ github.ref_type == 'tag' }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git fetch
          git pull origin main

      - name: Getting the dependencies
        run: |
          git clone https://github.com/Kampi/KiCad.git library
          echo "KICAD_LIBRARY=$(pwd)/library" >> $GITHUB_ENV

      - name: Extract release notes
        if: ${{ github.ref_type == 'tag' }}
        uses: ffurrer2/extract-release-notes@v2
        id: extract-release-notes
        with:
          prerelease: true

      - name: Update changelog
        if: ${{ github.ref_type == 'tag' }}
        uses: thomaseizinger/keep-a-changelog-new-release@v2
        with:
          tag: ${{ github.ref_name }}

      - name: Commit updated CHANGELOG
        if: ${{ github.ref_type == 'tag' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: Update CHANGELOG
          file_pattern: CHANGELOG.md
          push_options: '--force'

      - name: Cache 3D models data
        id: models-cache
        uses: set-soft/cache@main
        with:
          path: ~/cache_3d
          key: cache_3d

      - name: Determine VERSION Argument and Override Variant if Tag
        id: determine-version-and-args
        run: |
          last_tag=$(git describe --tags --abbrev=0 || echo "")
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version_arg="-E REVISION='${last_tag}'"
            echo "Overriding kibot_variant to 'RELEASED' for tag"
            echo "kibot_variant=RELEASED" >> $GITHUB_ENV
          else
            version_arg="-E REVISION='${last_tag}+ (Unreleased)'"
            echo "kibot_variant=${{ env.kibot_variant }}" >> $GITHUB_ENV
          fi

          # Determine additional_args based on the variant
          case "$kibot_variant" in
            "DRAFT")
              additional_args="--skip-pre draw_fancy_stackup,erc,drc ${version_arg} draft_group"
              ;;
            "PRELIMINARY")
              additional_args="--skip-pre erc,drc ${version_arg} all_group"
              ;;
            "CHECKED"|"RELEASED")
              additional_args="${version_arg} all_group"
              ;;
            *)
              echo "Unknown variant: $kibot_variant"
              exit 1
              ;;
          esac

          echo "version_arg=${version_arg}" >> $GITHUB_ENV
          echo "additional_args=${additional_args}" >> $GITHUB_ENV

      # Generate notes (skipped for DRAFT variant)
      - name: Generate notes
        if: ${{ env.kibot_variant != 'DRAFT' }}
        run: |
          cd hardware
          kibot -vvvv -c ${{ env.kibot_config }} -d ${{ env.kibot_output_dir }} -b ${{ env.kicad_board }}.kicad_pcb -s all -g variant=${{ env.kibot_variant }} notes 2> ../log/kibot_notes.log

      - name: Generate README only
        if: ${{ env.kibot_variant == 'DRAFT' }}
        run: |
          cd hardware
          kibot -vvvv -c ${{ env.kibot_config }} -d ${{ env.kibot_output_dir }} -b ${{ env.kicad_board }}.kicad_pcb -s draw_fancy_stackup,set_text_variables,erc,drc -g variant=${{ env.kibot_variant }} md_readme 2> ../log/kibot_readme.log

      - name: Generate outputs
        run: |
          cd hardware
          kibot -vvvv -c ${{ env.kibot_config }} -d ${{ env.kibot_output_dir }} -b ${{ env.kicad_board }}.kicad_pcb -g variant=${{ env.kibot_variant }} ${{ env.additional_args }} 2> ../log/kibot_output.log

      - name: Collect PCB costs
        run: |
          cd hardware
          revision=$(python3 kibot_resources/scripts/get_changelog_version.py -f CHANGELOG.md)
          if [[ $? -ne 0 ]]; then
              echo -e "${YELLOW}Warning: Unable to determine version from CHANGELOG.md. Defaulting to empty revision.${NC}"
              revision=""
          fi
          kibot -vvvv  --skip-pre erc,drc,draw_fancy_stackup -c kibot_yaml/kibot_main.yaml -d ${{ env.kibot_output_dir }} -g variant=${{ env.kibot_variant }} -E REVISION='$revision' -E KICOST_CONFIG=kibot_yaml/kicost_config_local.yaml xlsx_bom 2> ../log/kibot_output.log

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: Log-${{ env.kibot_variant }}
          path: log

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.kibot_variant }}
          path: production
          if-no-files-found: ignore

      - name: Pull latest changes
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "Triggered by a tag, committing changes in detached HEAD state"
            git add -A
            git commit -m "Update Outputs (release)"

            DETACHED_COMMIT=$(git rev-parse HEAD)
            echo "Checking out the main branch"
            git fetch origin main
            git checkout main

            echo "Merging detached HEAD commit into main"
            git merge --no-ff $DETACHED_COMMIT -m "Merge outputs from tag-triggered workflow" -X theirs
            echo "Pushing to main branch"
            git push origin main
          else
            echo "Triggered by a branch, using the current branch"
            git pull origin ${{ github.ref_name }} --tags --force
          fi

      - name: Discard changes to .kicad_pcb files and remove temp files
        run: |
          git checkout HEAD -- $(git ls-files "*.kicad_pcb")
          git clean -f "*.kicad_pcb"
          git clean -f "*.kicad_pro"
          git clean -f "*.kicad_dru"
          git clean -f "*.kicad_prl"

      - name: Clean up
        run: |
          find . -type f -iname \*.log -delete
          find . -type f -iname \*.ogv -delete

      - name: Push Outputs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.ref_name }}
          commit_message: Push outputs from CI/CD (${{ env.DATE }})